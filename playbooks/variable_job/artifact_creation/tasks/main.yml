---
- ec2_vpc_subnet_facts:
   region: "{{ec2_config.region}}"
   filters:
    "tag:Name": dbsubnet
    "tag:env": "{{ vpc_tag }}"
  register: mysub
  delegate_to: localhost

- debug:
   var: mysub

- name: Creating EC2 Instance
  ec2:
    region: "{{ec2_config.region}}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    zone: "{{ mysub.subnets[0].availability_zone }}"
    keypair: "{{ec2_config.keypair}}"
    instance_type: "{{instance_type}}"
    image: "{{ec2_config.image}}"
    vpc_subnet_id: "{{mysub.subnets[0].id}}"
    group: "{{ vpc_tag }}" 
    assign_public_ip: "{{ec2_config.assign_public_ip}}"
    count: 1
    wait: yes
    instance_tags:
       Name: "{{ec2_config.instance_tag_name4}}"
  register: ec2

- name: Debug instance
  debug: msg={{ item.public_ip }}
  with_items:
    - "{{ ec2.instances }}"

- name: Waiting for Instances to listen on port 22
  wait_for:
    state: started
    host: "{{ ec2.instances[0].public_dns_name  }}"
    port: 22
    timeout: 320

- name: copy key to hosts
  shell: scp /root/.ssh/authorized_keys ec2-user@{{ item.public_ip }}:/home/ec2-user/.ssh/authorized_keys
  with_items:
   - "{{ ec2.instances }}"

- name: copy key to host root
  shell: ssh ec2-user@{{ item.public_ip }} 'sudo cp /home/ec2-user/.ssh/authorized_keys /root/.ssh/'
  with_items:
   - "{{ ec2.instances }}"

- name: Add new instance to host group
  add_host: 
    name: "{{ item.public_ip }}"
    groups: "{{ec2_config.instance_tag_name4}}"
    ansible_ssh_private_key_file: /root/.ssh/id_rsa
    ansible_user: root 
    ansible_ssh_host: "{{ item.public_ip }}"
  with_items:
   - "{{ ec2.instances }}"
